"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = AccordionSection;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _RenderIf = _interopRequireDefault(require("../RenderIf"));

var _utils = require("../../libs/utils");

var _context = require("../Accordion/context");

var _rightArrow = _interopRequireDefault(require("./rightArrow"));

var _isInArray = _interopRequireDefault(require("./isInArray"));

var _removeItemFromArray = _interopRequireDefault(require("./removeItemFromArray"));

var _li = _interopRequireDefault(require("./styled/li"));

var _summary = _interopRequireDefault(require("./styled/summary"));

var _heading = _interopRequireDefault(require("./styled/heading"));

var _icon = _interopRequireDefault(require("./styled/icon"));

var _content = _interopRequireDefault(require("./styled/content"));

var _AssistiveText = _interopRequireDefault(require("../AssistiveText"));

var _span = _interopRequireDefault(require("./styled/span"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var AccordionItem = function (_Component) {
  (0, _inherits2["default"])(AccordionItem, _Component);

  var _super = _createSuper(AccordionItem);

  function AccordionItem(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, AccordionItem);
    _this = _super.call(this, props);
    _this.accordionDetailsId = (0, _utils.uniqueId)('accordion-section-details');
    _this.name = (0, _utils.uniqueId)('accordion-section');
    _this.handleToggleSection = _this.handleToggleSection.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleFocusSection = _this.handleFocusSection.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleKeyPressed = _this.handleKeyPressed.bind((0, _assertThisInitialized2["default"])(_this));
    _this.containerRef = _react["default"].createRef();
    _this.buttonRef = _react["default"].createRef();
    return _this;
  }

  (0, _createClass2["default"])(AccordionItem, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var _this$props = this.props,
          privateRegisterAccordionSection = _this$props.privateRegisterAccordionSection,
          disabled = _this$props.disabled;

      if (!disabled) {
        return setTimeout(function () {
          return privateRegisterAccordionSection({
            name: _this2.getCurrentName(),
            ref: _this2.containerRef.current,
            focusButton: function focusButton() {
              return _this2.buttonRef.current.focus();
            }
          });
        }, 0);
      }

      return null;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var privateUnregisterAccordionSection = this.props.privateUnregisterAccordionSection;
      privateUnregisterAccordionSection(this.getCurrentName());
    }
  }, {
    key: "getCurrentName",
    value: function getCurrentName() {
      var name = this.props.name;
      return name || this.name;
    }
  }, {
    key: "resolveActiveNamesWhenMultiple",
    value: function resolveActiveNamesWhenMultiple() {
      var activeNames = this.props.activeNames;
      var nameToToggle = this.getCurrentName();

      if (activeNames === undefined) {
        return [nameToToggle];
      }

      if ((0, _isInArray["default"])(activeNames, nameToToggle)) {
        return (0, _removeItemFromArray["default"])(activeNames, nameToToggle);
      }

      return activeNames.concat([nameToToggle]);
    }
  }, {
    key: "resolveActiveNames",
    value: function resolveActiveNames() {
      var _this$props2 = this.props,
          multiple = _this$props2.multiple,
          activeNames = _this$props2.activeNames;
      var nameToToggle = this.getCurrentName();

      if (multiple) {
        return this.resolveActiveNamesWhenMultiple();
      }

      if (nameToToggle === activeNames) {
        return '';
      }

      return nameToToggle;
    }
  }, {
    key: "handleToggleSection",
    value: function handleToggleSection(event) {
      var _this$props3 = this.props,
          disabled = _this$props3.disabled,
          privateOnToggleSection = _this$props3.privateOnToggleSection;

      if (!disabled) {
        privateOnToggleSection(event, this.resolveActiveNames());
      }
    }
  }, {
    key: "handleFocusSection",
    value: function handleFocusSection() {
      var _this$props4 = this.props,
          disabled = _this$props4.disabled,
          privateOnFocusSection = _this$props4.privateOnFocusSection;

      if (!disabled) {
        privateOnFocusSection(this.getCurrentName());
      }
    }
  }, {
    key: "handleKeyPressed",
    value: function handleKeyPressed(event) {
      var _this$props5 = this.props,
          disabled = _this$props5.disabled,
          privateOnKeyPressed = _this$props5.privateOnKeyPressed;

      if (!disabled) {
        privateOnKeyPressed(event);
      }
    }
  }, {
    key: "isExpanded",
    value: function isExpanded() {
      var _this$props6 = this.props,
          activeNames = _this$props6.activeNames,
          multiple = _this$props6.multiple;
      var currentName = this.getCurrentName();

      if (multiple && Array.isArray(activeNames)) {
        return (0, _isInArray["default"])(activeNames, currentName);
      }

      return activeNames === currentName;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props7 = this.props,
          style = _this$props7.style,
          disabled = _this$props7.disabled,
          children = _this$props7.children,
          label = _this$props7.label,
          icon = _this$props7.icon,
          assistiveText = _this$props7.assistiveText,
          className = _this$props7.className,
          variant = _this$props7.variant;
      var isExpanded = this.isExpanded();
      return _react["default"].createElement(_li["default"], {
        "data-id": "accordion-section-li",
        className: className,
        style: style,
        disabled: disabled,
        variant: variant,
        isExpanded: isExpanded,
        ref: this.containerRef
      }, _react["default"].createElement(_summary["default"], {
        "data-id": "accordion-section-summary",
        isExpanded: isExpanded,
        variant: variant,
        disabled: disabled,
        onClick: this.handleToggleSection,
        onFocus: this.handleFocusSection,
        onKeyDown: this.handleKeyPressed,
        "aria-controls": this.accordionDetailsId,
        "aria-expanded": isExpanded,
        type: "button",
        ref: this.buttonRef
      }, _react["default"].createElement(_rightArrow["default"], {
        isExpanded: isExpanded,
        disabled: disabled
      }), _react["default"].createElement(_AssistiveText["default"], {
        text: assistiveText
      }), _react["default"].createElement(_heading["default"], {
        disabled: disabled
      }, _react["default"].createElement(_RenderIf["default"], {
        isTrue: icon
      }, _react["default"].createElement(_icon["default"], null, icon)), _react["default"].createElement(_RenderIf["default"], {
        isTrue: label
      }, _react["default"].createElement(_span["default"], {
        "data-id": "accordion-section-label"
      }, label)))), _react["default"].createElement(_content["default"], {
        "data-id": "accordion-section-content",
        "aria-hidden": !isExpanded,
        isCollapsed: !isExpanded,
        id: this.accordionDetailsId
      }, children));
    }
  }]);
  return AccordionItem;
}(_react.Component);

function AccordionSection(props) {
  return _react["default"].createElement(_context.Consumer, null, function (context) {
    return _react["default"].createElement(AccordionItem, (0, _extends2["default"])({}, props, context));
  });
}

AccordionSection.propTypes = {
  className: _propTypes["default"].string,
  style: _propTypes["default"].object,
  disabled: _propTypes["default"].bool,
  children: _propTypes["default"].node,
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),
  icon: _propTypes["default"].node,
  assistiveText: _propTypes["default"].string,
  name: _propTypes["default"].string,
  variant: _propTypes["default"].oneOf(['default', 'error'])
};
AccordionSection.defaultProps = {
  className: undefined,
  style: undefined,
  assistiveText: undefined,
  disabled: false,
  children: null,
  label: undefined,
  icon: null,
  name: undefined,
  variant: 'default'
};