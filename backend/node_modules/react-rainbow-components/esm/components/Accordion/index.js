import _toArray from "@babel/runtime/helpers/toArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Provider } from './context';
import { LEFT_KEY, RIGHT_KEY, DOWN_KEY, UP_KEY } from '../../libs/constants';
import { getChildAccordionSectionNodes, insertChildOrderly } from './utils';
import StyledUl from './styled/ul';
var RIGHT_SIDE = 1;
var LEFT_SIDE = -1;

var Accordion = function (_Component) {
  _inherits(Accordion, _Component);

  var _super = _createSuper(Accordion);

  function Accordion(props) {
    var _this$keyHandlerMap;

    var _this;

    _classCallCheck(this, Accordion);

    _this = _super.call(this, props);
    _this.containerRef = React.createRef();
    _this.handleToggleSection = _this.handleToggleSection.bind(_assertThisInitialized(_this));
    _this.handleFocusSection = _this.handleFocusSection.bind(_assertThisInitialized(_this));
    _this.registerAccordionSection = _this.registerAccordionSection.bind(_assertThisInitialized(_this));
    _this.unregisterAccordionSection = _this.unregisterAccordionSection.bind(_assertThisInitialized(_this));
    _this.handleKeyPressed = _this.handleKeyPressed.bind(_assertThisInitialized(_this));
    _this.keyHandlerMap = (_this$keyHandlerMap = {}, _defineProperty(_this$keyHandlerMap, RIGHT_KEY, function () {
      return _this.selectAccordionSection(RIGHT_SIDE);
    }), _defineProperty(_this$keyHandlerMap, LEFT_KEY, function () {
      return _this.selectAccordionSection(LEFT_SIDE);
    }), _defineProperty(_this$keyHandlerMap, DOWN_KEY, function () {
      return _this.selectAccordionSection(RIGHT_SIDE);
    }), _defineProperty(_this$keyHandlerMap, UP_KEY, function () {
      return _this.selectAccordionSection(LEFT_SIDE);
    }), _this$keyHandlerMap);
    _this.state = {
      activeNames: props.activeSectionNames,
      multiple: props.multiple,
      privateOnToggleSection: _this.handleToggleSection,
      privateOnFocusSection: _this.handleFocusSection,
      privateRegisterAccordionSection: _this.registerAccordionSection,
      privateUnregisterAccordionSection: _this.unregisterAccordionSection,
      privateOnKeyPressed: _this.handleKeyPressed,
      childrenRegistered: []
    };
    return _this;
  }

  _createClass(Accordion, [{
    key: "setAsSelectAccordionSection",
    value: function setAsSelectAccordionSection(accordionSectionIndex) {
      var childrenRegistered = this.state.childrenRegistered;
      childrenRegistered[accordionSectionIndex].focusButton();
    }
  }, {
    key: "selectAccordionSection",
    value: function selectAccordionSection(side) {
      var _this$state = this.state,
          childrenRegistered = _this$state.childrenRegistered,
          currentSection = _this$state.currentSection;
      var accordionSectionIndex = childrenRegistered.findIndex(function (section) {
        return section.name === currentSection;
      });

      if (accordionSectionIndex === childrenRegistered.length - 1 && side === RIGHT_SIDE) {
        this.setAsSelectAccordionSection(0);
      } else if (accordionSectionIndex === 0 && side === LEFT_SIDE) {
        this.setAsSelectAccordionSection(childrenRegistered.length - 1);
      } else {
        this.setAsSelectAccordionSection(accordionSectionIndex + side);
      }
    }
  }, {
    key: "handleToggleSection",
    value: function handleToggleSection(event, name) {
      var onToggleSection = this.props.onToggleSection;

      if (typeof onToggleSection === 'function') {
        return onToggleSection(event, name);
      }

      return this.setState({
        activeNames: name
      });
    }
  }, {
    key: "handleFocusSection",
    value: function handleFocusSection(currentSection) {
      return this.setState({
        currentSection: currentSection
      });
    }
  }, {
    key: "handleKeyPressed",
    value: function handleKeyPressed(event) {
      if (this.keyHandlerMap[event.keyCode]) {
        event.preventDefault();
        return this.keyHandlerMap[event.keyCode]();
      }

      return null;
    }
  }, {
    key: "registerAccordionSection",
    value: function registerAccordionSection(section) {
      var childrenRegistered = this.state.childrenRegistered;

      var _getChildAccordionSec = getChildAccordionSectionNodes(this.containerRef.current),
          _getChildAccordionSec2 = _toArray(_getChildAccordionSec),
          nodes = _getChildAccordionSec2.slice(0);

      var newChildrenRefs = insertChildOrderly(childrenRegistered, section, nodes);
      this.setState({
        childrenRegistered: newChildrenRefs
      });
    }
  }, {
    key: "unregisterAccordionSection",
    value: function unregisterAccordionSection(sectionName) {
      var childrenRegistered = this.state.childrenRegistered;
      var newAccordionSectionChildren = childrenRegistered.filter(function (section) {
        return section.name !== sectionName;
      });
      this.setState({
        childrenRegistered: newAccordionSectionChildren
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          id = _this$props.id,
          children = _this$props.children,
          style = _this$props.style,
          className = _this$props.className;
      return React.createElement(StyledUl, {
        ref: this.containerRef,
        id: id,
        className: className,
        style: style
      }, React.createElement(Provider, {
        value: this.state
      }, children));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      var activeSectionNames = props.activeSectionNames,
          onToggleSection = props.onToggleSection;

      if (activeSectionNames && activeSectionNames !== state.activeNames && typeof onToggleSection === 'function') {
        return {
          activeNames: activeSectionNames
        };
      }

      return null;
    }
  }]);

  return Accordion;
}(Component);

export { Accordion as default };
Accordion.propTypes = {
  id: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.object,
  children: PropTypes.node,
  multiple: PropTypes.bool,
  onToggleSection: PropTypes.func,
  activeSectionNames: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string])
};
Accordion.defaultProps = {
  className: undefined,
  style: undefined,
  children: null,
  id: undefined,
  multiple: false,
  onToggleSection: undefined,
  activeSectionNames: undefined
};