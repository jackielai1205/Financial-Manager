import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import RenderIf from '../RenderIf';
import { uniqueId } from '../../libs/utils';
import { Consumer } from '../Accordion/context';
import RightArrow from './rightArrow';
import isInArray from './isInArray';
import removeItemFromArray from './removeItemFromArray';
import StyledLi from './styled/li';
import StyledSummary from './styled/summary';
import StyledHeading from './styled/heading';
import StyledIcon from './styled/icon';
import StyledContent from './styled/content';
import AssistiveText from '../AssistiveText';
import StyledSpan from './styled/span';

var AccordionItem = function (_Component) {
  _inherits(AccordionItem, _Component);

  var _super = _createSuper(AccordionItem);

  function AccordionItem(props) {
    var _this;

    _classCallCheck(this, AccordionItem);

    _this = _super.call(this, props);
    _this.accordionDetailsId = uniqueId('accordion-section-details');
    _this.name = uniqueId('accordion-section');
    _this.handleToggleSection = _this.handleToggleSection.bind(_assertThisInitialized(_this));
    _this.handleFocusSection = _this.handleFocusSection.bind(_assertThisInitialized(_this));
    _this.handleKeyPressed = _this.handleKeyPressed.bind(_assertThisInitialized(_this));
    _this.containerRef = React.createRef();
    _this.buttonRef = React.createRef();
    return _this;
  }

  _createClass(AccordionItem, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var _this$props = this.props,
          privateRegisterAccordionSection = _this$props.privateRegisterAccordionSection,
          disabled = _this$props.disabled;

      if (!disabled) {
        return setTimeout(function () {
          return privateRegisterAccordionSection({
            name: _this2.getCurrentName(),
            ref: _this2.containerRef.current,
            focusButton: function focusButton() {
              return _this2.buttonRef.current.focus();
            }
          });
        }, 0);
      }

      return null;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var privateUnregisterAccordionSection = this.props.privateUnregisterAccordionSection;
      privateUnregisterAccordionSection(this.getCurrentName());
    }
  }, {
    key: "getCurrentName",
    value: function getCurrentName() {
      var name = this.props.name;
      return name || this.name;
    }
  }, {
    key: "resolveActiveNamesWhenMultiple",
    value: function resolveActiveNamesWhenMultiple() {
      var activeNames = this.props.activeNames;
      var nameToToggle = this.getCurrentName();

      if (activeNames === undefined) {
        return [nameToToggle];
      }

      if (isInArray(activeNames, nameToToggle)) {
        return removeItemFromArray(activeNames, nameToToggle);
      }

      return activeNames.concat([nameToToggle]);
    }
  }, {
    key: "resolveActiveNames",
    value: function resolveActiveNames() {
      var _this$props2 = this.props,
          multiple = _this$props2.multiple,
          activeNames = _this$props2.activeNames;
      var nameToToggle = this.getCurrentName();

      if (multiple) {
        return this.resolveActiveNamesWhenMultiple();
      }

      if (nameToToggle === activeNames) {
        return '';
      }

      return nameToToggle;
    }
  }, {
    key: "handleToggleSection",
    value: function handleToggleSection(event) {
      var _this$props3 = this.props,
          disabled = _this$props3.disabled,
          privateOnToggleSection = _this$props3.privateOnToggleSection;

      if (!disabled) {
        privateOnToggleSection(event, this.resolveActiveNames());
      }
    }
  }, {
    key: "handleFocusSection",
    value: function handleFocusSection() {
      var _this$props4 = this.props,
          disabled = _this$props4.disabled,
          privateOnFocusSection = _this$props4.privateOnFocusSection;

      if (!disabled) {
        privateOnFocusSection(this.getCurrentName());
      }
    }
  }, {
    key: "handleKeyPressed",
    value: function handleKeyPressed(event) {
      var _this$props5 = this.props,
          disabled = _this$props5.disabled,
          privateOnKeyPressed = _this$props5.privateOnKeyPressed;

      if (!disabled) {
        privateOnKeyPressed(event);
      }
    }
  }, {
    key: "isExpanded",
    value: function isExpanded() {
      var _this$props6 = this.props,
          activeNames = _this$props6.activeNames,
          multiple = _this$props6.multiple;
      var currentName = this.getCurrentName();

      if (multiple && Array.isArray(activeNames)) {
        return isInArray(activeNames, currentName);
      }

      return activeNames === currentName;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props7 = this.props,
          style = _this$props7.style,
          disabled = _this$props7.disabled,
          children = _this$props7.children,
          label = _this$props7.label,
          icon = _this$props7.icon,
          assistiveText = _this$props7.assistiveText,
          className = _this$props7.className,
          variant = _this$props7.variant;
      var isExpanded = this.isExpanded();
      return React.createElement(StyledLi, {
        "data-id": "accordion-section-li",
        className: className,
        style: style,
        disabled: disabled,
        variant: variant,
        isExpanded: isExpanded,
        ref: this.containerRef
      }, React.createElement(StyledSummary, {
        "data-id": "accordion-section-summary",
        isExpanded: isExpanded,
        variant: variant,
        disabled: disabled,
        onClick: this.handleToggleSection,
        onFocus: this.handleFocusSection,
        onKeyDown: this.handleKeyPressed,
        "aria-controls": this.accordionDetailsId,
        "aria-expanded": isExpanded,
        type: "button",
        ref: this.buttonRef
      }, React.createElement(RightArrow, {
        isExpanded: isExpanded,
        disabled: disabled
      }), React.createElement(AssistiveText, {
        text: assistiveText
      }), React.createElement(StyledHeading, {
        disabled: disabled
      }, React.createElement(RenderIf, {
        isTrue: icon
      }, React.createElement(StyledIcon, null, icon)), React.createElement(RenderIf, {
        isTrue: label
      }, React.createElement(StyledSpan, {
        "data-id": "accordion-section-label"
      }, label)))), React.createElement(StyledContent, {
        "data-id": "accordion-section-content",
        "aria-hidden": !isExpanded,
        isCollapsed: !isExpanded,
        id: this.accordionDetailsId
      }, children));
    }
  }]);

  return AccordionItem;
}(Component);

export default function AccordionSection(props) {
  return React.createElement(Consumer, null, function (context) {
    return React.createElement(AccordionItem, _extends({}, props, context));
  });
}
AccordionSection.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  disabled: PropTypes.bool,
  children: PropTypes.node,
  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
  icon: PropTypes.node,
  assistiveText: PropTypes.string,
  name: PropTypes.string,
  variant: PropTypes.oneOf(['default', 'error'])
};
AccordionSection.defaultProps = {
  className: undefined,
  style: undefined,
  assistiveText: undefined,
  disabled: false,
  children: null,
  label: undefined,
  icon: null,
  name: undefined,
  variant: 'default'
};