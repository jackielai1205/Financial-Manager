import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { uniqueId } from '../../libs/utils';
import { Consumer } from '../CarouselCard/context';
import { getItemIndex } from '../CarouselCard/utils';
import StyledLi from './styled/li';
import StyledInnerContainer from './styled/innerContainer';
import ImageContainer from './imageContainer';

var Item = function (_Component) {
  _inherits(Item, _Component);

  var _super = _createSuper(Item);

  function Item(props) {
    var _this;

    _classCallCheck(this, Item);

    _this = _super.call(this, props);
    _this.carouselImageID = uniqueId('carousel-content-id');
    _this.carouselIndicatorID = uniqueId('indicator-id');
    _this.itemRef = React.createRef();
    _this.state = {
      activeItem: undefined,
      prevActiveItem: undefined
    };
    return _this;
  }

  _createClass(Item, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var _this$props = this.props,
          privateRegisterChild = _this$props.privateRegisterChild,
          header = _this$props.header;
      return setTimeout(function () {
        return privateRegisterChild({
          containerID: _this2.carouselImageID,
          indicatorID: _this2.carouselIndicatorID,
          ref: _this2.itemRef.current,
          header: header
        });
      }, 0);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var privateUnregisterChild = this.props.privateUnregisterChild;
      privateUnregisterChild(this.carouselIndicatorID);
    }
  }, {
    key: "getAnimationDirection",
    value: function getAnimationDirection() {
      var _this$props2 = this.props,
          childrenRegistred = _this$props2.childrenRegistred,
          isAnimationPaused = _this$props2.isAnimationPaused;
      var _this$state = this.state,
          activeItem = _this$state.activeItem,
          prevActiveItem = _this$state.prevActiveItem;

      if (isAnimationPaused) {
        var activeItemIndex = getItemIndex(childrenRegistred, activeItem);
        var prevItemIndex = getItemIndex(childrenRegistred, prevActiveItem);

        if (activeItemIndex === 0 && prevItemIndex === childrenRegistred.length - 1) {
          return 'right-to-left';
        }

        if (prevItemIndex === 0 && activeItemIndex === childrenRegistred.length - 1) {
          return 'left-to-right';
        }

        if (activeItemIndex > prevItemIndex) {
          return 'right-to-left';
        }

        return 'left-to-right';
      }

      return 'right-to-left';
    }
  }, {
    key: "getTabIndex",
    value: function getTabIndex() {
      var activeItem = this.props.activeItem;

      if (activeItem === this.carouselIndicatorID) {
        return 0;
      }

      return -1;
    }
  }, {
    key: "getAriaHidden",
    value: function getAriaHidden() {
      var activeItem = this.props.activeItem;
      return activeItem !== this.carouselIndicatorID;
    }
  }, {
    key: "getImageSrc",
    value: function getImageSrc() {
      var src = this.props.src;
      return {
        backgroundImage: "url(".concat(src, ")")
      };
    }
  }, {
    key: "getHtmlElememnt",
    value: function getHtmlElememnt() {
      var href = this.props.href;

      if (href && typeof href === 'string') {
        return 'a';
      }

      return 'div';
    }
  }, {
    key: "shouldShow",
    value: function shouldShow() {
      var _this$state2 = this.state,
          activeItem = _this$state2.activeItem,
          prevActiveItem = _this$state2.prevActiveItem;
      var areTheSame = activeItem === prevActiveItem;
      if (areTheSame) return false;
      return activeItem === this.carouselIndicatorID;
    }
  }, {
    key: "shouldHide",
    value: function shouldHide() {
      var _this$state3 = this.state,
          activeItem = _this$state3.activeItem,
          prevActiveItem = _this$state3.prevActiveItem;
      var isNotActive = activeItem !== this.carouselIndicatorID;
      var itWasActive = prevActiveItem === this.carouselIndicatorID;
      return isNotActive && itWasActive;
    }
  }, {
    key: "shouldBeActive",
    value: function shouldBeActive() {
      var _this$state4 = this.state,
          activeItem = _this$state4.activeItem,
          prevActiveItem = _this$state4.prevActiveItem;
      var areTheSame = activeItem === prevActiveItem;
      var isSelected = activeItem === this.carouselIndicatorID;
      return areTheSame && isSelected;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          assistiveText = _this$props3.assistiveText,
          description = _this$props3.description,
          header = _this$props3.header,
          href = _this$props3.href,
          style = _this$props3.style,
          className = _this$props3.className;
      var hasContent = !!(header || description);
      var tabIndex = href ? this.getTabIndex() : undefined;
      return React.createElement(StyledLi, {
        id: this.carouselImageID,
        className: className,
        role: "tabpanel",
        "aria-hidden": this.getAriaHidden(),
        "aria-labelledby": this.carouselIndicatorID,
        style: style,
        ref: this.itemRef,
        shouldBeActive: this.shouldBeActive(),
        shouldShow: this.shouldShow(),
        shouldHide: this.shouldHide(),
        direction: this.getAnimationDirection()
      }, React.createElement(StyledInnerContainer, {
        className: "rainbow-carousel-image",
        tabIndex: tabIndex,
        href: href,
        as: this.getHtmlElememnt(),
        "data-id": "carousel-image_inner-container"
      }, React.createElement(ImageContainer, {
        imageSrc: this.getImageSrc(),
        assistiveText: assistiveText,
        hasContent: hasContent,
        header: header,
        description: description
      })));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      var activeItem = props.activeItem;
      var stateActiveItem = state.activeItem;
      var newState = {
        activeItem: activeItem,
        prevActiveItem: stateActiveItem
      };
      var isNotTheSameActive = state.activeItem !== newState.activeItem;
      var isNotTheSamePrev = state.prevActiveItem !== newState.prevActiveItem;
      var isNotTheSameState = isNotTheSameActive || isNotTheSamePrev;

      if (isNotTheSameState) {
        return newState;
      }

      return null;
    }
  }]);

  return Item;
}(Component);

export default function CarouselImage(props) {
  return React.createElement(Consumer, null, function (value) {
    return React.createElement(Item, _extends({}, props, value));
  });
}
CarouselImage.propTypes = {
  src: PropTypes.string,
  header: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
  description: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
  assistiveText: PropTypes.string,
  href: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.object
};
CarouselImage.defaultProps = {
  src: undefined,
  header: undefined,
  description: undefined,
  assistiveText: undefined,
  href: undefined,
  className: undefined,
  style: undefined
};