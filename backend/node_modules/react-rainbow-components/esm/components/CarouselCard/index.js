import _toArray from "@babel/runtime/helpers/toArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Provider } from './context';
import Indicators from './indicators';
import AnimationButton from './animationButton';
import { getItemIndex, getChildTabNodes, insertChildOrderly, getCarouselCardContainerStyles } from './utils';
import StyledContainer from './styled/container';
import StyledAutoplay from './styled/autoplay';
import StyledImagesUl from './styled/imagesUl';

var CarouselCard = function (_Component) {
  _inherits(CarouselCard, _Component);

  var _super = _createSuper(CarouselCard);

  function CarouselCard(props) {
    var _this;

    _classCallCheck(this, CarouselCard);

    _this = _super.call(this, props);
    _this.container = React.createRef();
    _this.registerChild = _this.registerChild.bind(_assertThisInitialized(_this));
    _this.unregisterChild = _this.unregisterChild.bind(_assertThisInitialized(_this));
    _this.setActiveItem = _this.setActiveItem.bind(_assertThisInitialized(_this));
    _this.handleOnClick = _this.handleOnClick.bind(_assertThisInitialized(_this));
    var disableAutoScroll = _this.props.disableAutoScroll;
    _this.state = {
      childrenRegistred: [],
      activeItem: undefined,
      isAnimationPaused: disableAutoScroll,
      privateRegisterChild: _this.registerChild,
      privateUnregisterChild: _this.unregisterChild
    };
    _this.containerRef = React.createRef();
    return _this;
  }

  _createClass(CarouselCard, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var isAnimationPaused = this.state.isAnimationPaused;

      if (!isAnimationPaused) {
        this.startAnimation();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.animationTimeout) {
        clearTimeout(this.animationTimeout);
      }
    }
  }, {
    key: "getContainerStyle",
    value: function getContainerStyle() {
      var style = this.props.style;
      return _objectSpread(_objectSpread({}, getCarouselCardContainerStyles(this.container.current)), style);
    }
  }, {
    key: "setActiveItem",
    value: function setActiveItem(id) {
      this.setState({
        activeItem: id,
        isAnimationPaused: true
      });
    }
  }, {
    key: "handleOnClick",
    value: function handleOnClick() {
      var isAnimationPaused = this.state.isAnimationPaused;

      if (isAnimationPaused) {
        this.startAnimation();
      }

      this.setState({
        isAnimationPaused: !isAnimationPaused
      });
    }
  }, {
    key: "startAnimation",
    value: function startAnimation() {
      var _this2 = this;

      var _this$props = this.props,
          scrollDuration = _this$props.scrollDuration,
          disableAutoRefresh = _this$props.disableAutoRefresh;
      this.animationTimeout = setTimeout(function () {
        var isAnimationPaused = _this2.state.isAnimationPaused;

        if (!isAnimationPaused) {
          var _this2$state = _this2.state,
              childrenRegistred = _this2$state.childrenRegistred,
              activeItem = _this2$state.activeItem;
          var selectedItemIndex = getItemIndex(childrenRegistred, activeItem);
          var isLastItem = selectedItemIndex === childrenRegistred.length - 1;
          var nextItem = isLastItem ? 0 : selectedItemIndex + 1;

          if (isLastItem && disableAutoRefresh) {
            _this2.setState({
              isAnimationPaused: true
            });
          } else {
            _this2.startAnimation();

            _this2.setState({
              activeItem: childrenRegistred[nextItem].indicatorID
            });
          }
        }
      }, scrollDuration * 1000);
    }
  }, {
    key: "registerChild",
    value: function registerChild(child) {
      var childrenRegistred = this.state.childrenRegistred;

      var _getChildTabNodes = getChildTabNodes(this.containerRef.current),
          _getChildTabNodes2 = _toArray(_getChildTabNodes),
          nodes = _getChildTabNodes2.slice(0);

      var newChildren = insertChildOrderly(childrenRegistred, child, nodes);
      this.setState({
        childrenRegistred: newChildren,
        activeItem: newChildren[0].indicatorID
      });
    }
  }, {
    key: "unregisterChild",
    value: function unregisterChild(indicatorID) {
      var childrenRegistred = this.state.childrenRegistred;
      var newChildren = childrenRegistred.filter(function (child) {
        return child.indicatorID !== indicatorID;
      });
      this.setState({
        childrenRegistred: newChildren,
        activeItem: newChildren[0].indicatorID
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          children = _this$props2.children,
          id = _this$props2.id,
          className = _this$props2.className;
      var _this$state = this.state,
          childrenRegistred = _this$state.childrenRegistred,
          activeItem = _this$state.activeItem,
          isAnimationPaused = _this$state.isAnimationPaused;
      return React.createElement(StyledContainer, {
        className: className,
        style: this.getContainerStyle(),
        id: id,
        ref: this.container
      }, React.createElement(StyledAutoplay, null, React.createElement(AnimationButton, {
        onClick: this.handleOnClick,
        isAnimationPaused: isAnimationPaused
      })), React.createElement(StyledImagesUl, {
        ref: this.containerRef
      }, React.createElement(Provider, {
        value: this.state
      }, children)), React.createElement(Indicators, {
        carouselChildren: childrenRegistred,
        onSelect: this.setActiveItem,
        selectedItem: activeItem
      }));
    }
  }]);

  return CarouselCard;
}(Component);

export { CarouselCard as default };
CarouselCard.propTypes = {
  scrollDuration: PropTypes.number,
  disableAutoScroll: PropTypes.bool,
  disableAutoRefresh: PropTypes.bool,
  className: PropTypes.string,
  style: PropTypes.object,
  children: PropTypes.node,
  id: PropTypes.string
};
CarouselCard.defaultProps = {
  scrollDuration: 5,
  disableAutoScroll: false,
  disableAutoRefresh: false,
  className: undefined,
  style: undefined,
  children: null,
  id: undefined
};