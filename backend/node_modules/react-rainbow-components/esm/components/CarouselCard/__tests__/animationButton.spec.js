import React from 'react';
import { mount } from 'enzyme';
import ButtonIcon from '../../ButtonIcon';
import AnimationButtom from '../animationButton';
describe('<AnimationButtom />', function () {
  it('should set the right assistive text', function () {
    var component = mount(React.createElement(AnimationButtom, {
      isAnimationPaused: true
    }));
    expect(component.find(ButtonIcon).prop('assistiveText')).toBe('Start auto-play');
  });
  it('should set the right assistive text', function () {
    var component = mount(React.createElement(AnimationButtom, {
      isAnimationPaused: false
    }));
    expect(component.find(ButtonIcon).prop('assistiveText')).toBe('Stop auto-play');
  });
  it('should set the right aria-pressed value', function () {
    var component = mount(React.createElement(AnimationButtom, {
      isAnimationPaused: true
    }));
    expect(component.find(ButtonIcon).prop('ariaPressed')).toBe(true);
  });
  it('should show the play icon', function () {
    var component = mount(React.createElement(AnimationButtom, null));
    expect(component.find('PlayIcon').exists()).toBe(true);
  });
  it('should show the pause icon when isAnimationPaused is false', function () {
    var component = mount(React.createElement(AnimationButtom, {
      isAnimationPaused: false
    }));
    expect(component.find('PauseIcon').exists()).toBe(true);
  });
  it('should call the function passed in onClick', function () {
    var onClickMockFn = jest.fn();
    var component = mount(React.createElement(AnimationButtom, {
      onClick: onClickMockFn
    }));
    component.find(ButtonIcon).simulate('click');
    expect(onClickMockFn).toHaveBeenCalledTimes(1);
  });
});