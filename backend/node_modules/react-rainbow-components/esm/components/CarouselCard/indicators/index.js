import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _toArray from "@babel/runtime/helpers/toArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
var _excluded = ["ref"];

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { LEFT_KEY, RIGHT_KEY } from '../../../libs/constants';
import { getItemIndex } from '../utils';
import { getChildTabNodes, insertChildOrderly } from './utils';
import Indicator from './indicator';
import StyledIndicatorUl from '../styled/indicatorsUl';
var RIGHT_SIDE = 1;
var LEFT_SIDE = -1;

var Indicators = function (_Component) {
  _inherits(Indicators, _Component);

  var _super = _createSuper(Indicators);

  function Indicators(props) {
    var _this$keyHandlerMap;

    var _this;

    _classCallCheck(this, Indicators);

    _this = _super.call(this, props);
    _this.container = React.createRef();
    _this.handleKeyPressed = _this.handleKeyPressed.bind(_assertThisInitialized(_this));
    _this.registerIndicator = _this.registerIndicator.bind(_assertThisInitialized(_this));
    _this.unregisterIndicator = _this.unregisterIndicator.bind(_assertThisInitialized(_this));
    _this.keyHandlerMap = (_this$keyHandlerMap = {}, _defineProperty(_this$keyHandlerMap, RIGHT_KEY, function () {
      return _this.selectIndicator(RIGHT_SIDE);
    }), _defineProperty(_this$keyHandlerMap, LEFT_KEY, function () {
      return _this.selectIndicator(LEFT_SIDE);
    }), _this$keyHandlerMap);
    _this.state = {
      indicatorsRefs: []
    };
    return _this;
  }

  _createClass(Indicators, [{
    key: "setAsSelectedIndicator",
    value: function setAsSelectedIndicator(tabIndex) {
      var indicatorsRefs = this.state.indicatorsRefs;
      indicatorsRefs[tabIndex].ref.current.click();
      indicatorsRefs[tabIndex].ref.current.focus();
    }
  }, {
    key: "handleKeyPressed",
    value: function handleKeyPressed(event) {
      if (this.keyHandlerMap[event.keyCode]) {
        return this.keyHandlerMap[event.keyCode]();
      }

      return null;
    }
  }, {
    key: "registerIndicator",
    value: function registerIndicator(indicator) {
      var indicatorsRefs = this.state.indicatorsRefs;

      var _getChildTabNodes = getChildTabNodes(this.container.current),
          _getChildTabNodes2 = _toArray(_getChildTabNodes),
          nodes = _getChildTabNodes2.slice(0);

      var newRefs = insertChildOrderly(indicatorsRefs, indicator, nodes);
      this.setState({
        indicatorsRefs: newRefs
      });
    }
  }, {
    key: "unregisterIndicator",
    value: function unregisterIndicator(indicator) {
      var indicatorsRefs = this.state.indicatorsRefs;
      var newChildren = indicatorsRefs.filter(function (child) {
        return child.ref !== indicator;
      });
      this.setState({
        indicatorsRefs: newChildren
      });
    }
  }, {
    key: "selectIndicator",
    value: function selectIndicator(side) {
      var selectedItem = this.props.selectedItem;
      var indicatorsRefs = this.state.indicatorsRefs;
      var indicatorIndex = getItemIndex(indicatorsRefs, selectedItem);

      if (indicatorIndex === indicatorsRefs.length - 1 && side === RIGHT_SIDE) {
        this.setAsSelectedIndicator(0);
      } else if (indicatorIndex === 0 && side === LEFT_SIDE) {
        this.setAsSelectedIndicator(indicatorsRefs.length - 1);
      } else {
        this.setAsSelectedIndicator(indicatorIndex + side);
      }
    }
  }, {
    key: "isSelected",
    value: function isSelected(id) {
      var selectedItem = this.props.selectedItem;
      return selectedItem === id;
    }
  }, {
    key: "renderIndicators",
    value: function renderIndicators() {
      var _this2 = this;

      var _this$props = this.props,
          carouselChildren = _this$props.carouselChildren,
          onSelect = _this$props.onSelect,
          selectedItem = _this$props.selectedItem;
      return carouselChildren.map(function (_ref) {
        var ref = _ref.ref,
            rest = _objectWithoutProperties(_ref, _excluded);

        return React.createElement(Indicator, _extends({}, rest, {
          onSelect: onSelect,
          selectedItem: selectedItem,
          onCreate: _this2.registerIndicator,
          onDestroy: _this2.unregisterIndicator,
          key: rest.indicatorID
        }));
      });
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement(StyledIndicatorUl, {
        role: "tablist",
        onKeyDown: this.handleKeyPressed,
        ref: this.container
      }, this.renderIndicators());
    }
  }]);

  return Indicators;
}(Component);

export { Indicators as default };
Indicators.propTypes = {
  carouselChildren: PropTypes.array,
  onSelect: PropTypes.func,
  selectedItem: PropTypes.string
};
Indicators.defaultProps = {
  carouselChildren: [],
  onSelect: function onSelect() {},
  selectedItem: undefined
};