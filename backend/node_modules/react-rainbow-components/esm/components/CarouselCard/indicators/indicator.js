import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import AssistiveText from '../../AssistiveText';
import StyledIndicatorLi from '../styled/indicatorLi';
import StyledIndicatorButton from '../styled/indicatorButton';

function getAssistiveText(header) {
  if (typeof header === 'string') {
    return "".concat(header, " Tab");
  }

  return undefined;
}

var Indicator = function (_Component) {
  _inherits(Indicator, _Component);

  var _super = _createSuper(Indicator);

  function Indicator(props) {
    var _this;

    _classCallCheck(this, Indicator);

    _this = _super.call(this, props);
    _this.indicatorRef = React.createRef();
    return _this;
  }

  _createClass(Indicator, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          onCreate = _this$props.onCreate,
          indicatorID = _this$props.indicatorID;
      onCreate({
        indicatorID: indicatorID,
        ref: this.indicatorRef
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var onDestroy = this.props.onDestroy;
      onDestroy(this.indicatorRef);
    }
  }, {
    key: "getTabIndex",
    value: function getTabIndex(id) {
      if (this.isSelected(id)) {
        return 0;
      }

      return -1;
    }
  }, {
    key: "isSelected",
    value: function isSelected(id) {
      var selectedItem = this.props.selectedItem;
      return selectedItem === id;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          indicatorID = _this$props2.indicatorID,
          containerID = _this$props2.containerID,
          header = _this$props2.header,
          onSelect = _this$props2.onSelect;
      var assistiveText = getAssistiveText(header);
      var isSelected = this.isSelected(indicatorID);
      return React.createElement(StyledIndicatorLi, {
        role: "presentation",
        key: indicatorID
      }, React.createElement(StyledIndicatorButton, {
        id: indicatorID,
        isSelected: isSelected,
        role: "tab",
        tabIndex: this.getTabIndex(indicatorID),
        "aria-selected": isSelected,
        "aria-controls": containerID,
        title: assistiveText,
        onClick: function onClick() {
          return onSelect(indicatorID);
        },
        ref: this.indicatorRef
      }, React.createElement(AssistiveText, {
        text: assistiveText
      })));
    }
  }]);

  return Indicator;
}(Component);

export { Indicator as default };
Indicator.propTypes = {
  indicatorID: PropTypes.string,
  containerID: PropTypes.string,
  header: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
  onSelect: PropTypes.func,
  onCreate: PropTypes.func,
  onDestroy: PropTypes.func,
  selectedItem: PropTypes.string
};
Indicator.defaultProps = {
  indicatorID: undefined,
  containerID: undefined,
  header: undefined,
  onSelect: function onSelect() {},
  onCreate: function onCreate() {},
  onDestroy: function onDestroy() {},
  selectedItem: undefined
};